/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.intent.parseuri;

import java.net.URISyntaxException;
import android.content.Intent;
import android.net.Uri;
import org.appcelerator.kroll.KrollDict;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;


@Kroll.module(name="TiIntentParseuri", id="ti.intent.parseuri")
public class TiIntentParseuriModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TiIntentParseuriModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TiIntentParseuriModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public String example()
	{
		Log.d(LCAT, "example called");
		return "hello world";
	}

	@Kroll.method
	public KrollDict parseUri(String url)
	{
		Intent intent;
		
		String data;
		String packageName;
		boolean error;
		
		Log.d(LCAT, "parseUri called");
		
		try {
			intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);
			data = intent.getDataString();
			packageName = intent.getPackage();
			error = false;
		} catch (URISyntaxException ex) {
			Log.d(LCAT, "URISyntaxException");
			
			data = "";
			packageName = "";
			error = true;
		}
		
		KrollDict dict = new KrollDict();
		dict.put("data", data);
		dict.put("packageName", packageName);
		dict.put("error", error);
		return dict;
	}
}
